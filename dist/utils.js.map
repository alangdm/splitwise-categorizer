{"version":3,"sources":["src/utils.js"],"names":["COLUMN_REGEX","date","description","category","cost","currency","PAYMENT_METHODS","tc","en","ef","id","lp","ic","db","DESCRIPTION_REGEX","RegExp","Object","keys","join","getColumnIndexes","headers","columns","key","regex","entries","index","findIndex","h","test","parseDescription","rawText","paymentMethod","exec","groups","toLowerCase","getPaymentMethodName","method","lang"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,aADa;AAEnBC,EAAAA,WAAW,EAAE,0BAFM;AAGnBC,EAAAA,QAAQ,EAAE,qBAHS;AAInBC,EAAAA,IAAI,EAAE,aAJa;AAKnBC,EAAAA,QAAQ,EAAE;AALS,CAArB;AAQA,MAAMC,eAAe,GAAG;AACtBC,EAAAA,EAAE,EAAE;AACFC,IAAAA,EAAE,EAAE;AADF,GADkB;AAItBC,EAAAA,EAAE,EAAE;AACFD,IAAAA,EAAE,EAAE;AADF,GAJkB;AAOtBE,EAAAA,EAAE,EAAE;AACFF,IAAAA,EAAE,EAAE;AADF,GAPkB;AAUtBG,EAAAA,EAAE,EAAE;AACFH,IAAAA,EAAE,EAAE;AADF,GAVkB;AAatBI,EAAAA,EAAE,EAAE;AACFJ,IAAAA,EAAE,EAAE;AADF,GAbkB;AAgBtBK,EAAAA,EAAE,EAAE;AACFL,IAAAA,EAAE,EAAE;AADF;AAhBkB,CAAxB;AAqBA,MAAMM,iBAAiB,GAAG,IAAIC,MAAJ,CACvB,uBAAsBC,MAAM,CAACC,IAAP,CAAYX,eAAZ,EAA6BY,IAA7B,CACrB,GADqB,CAErB,8BAHsB,EAIxB,GAJwB,CAA1B;AAOA,OAAO,MAAMC,gBAAgB,GAAIC,OAAD,IAAa;AAC3C,QAAMC,OAAO,GAAG,EAAhB;;AACA,OAAK,MAAM,CAACC,GAAD,EAAMC,KAAN,CAAX,IAA2BP,MAAM,CAACQ,OAAP,CAAexB,YAAf,CAA3B,EAAyD;AACvD,UAAMyB,KAAK,GAAGL,OAAO,CAACM,SAAR,CAAmBC,CAAD,IAAOJ,KAAK,CAACK,IAAN,CAAWD,CAAX,CAAzB,CAAd;AACAN,IAAAA,OAAO,CAACC,GAAD,CAAP,GAAeG,KAAf;AACD;;AACD,SAAOJ,OAAP;AACD,CAPM;AASP,OAAO,MAAMQ,gBAAgB,GAAIC,OAAD,IAAa;AAC3C,QAAM;AAAEC,IAAAA,aAAF;AAAiB7B,IAAAA;AAAjB,MAAiCY,iBAAiB,CAACkB,IAAlB,CAAuBF,OAAvB,EAAgCG,MAAvE;AACA,SAAO;AAAEF,IAAAA,aAAa,EAAEA,aAAa,EAAEG,WAAf,EAAjB;AAA+ChC,IAAAA;AAA/C,GAAP;AACD,CAHM;AAKP,OAAO,MAAMiC,oBAAoB,GAAG,CAACC,MAAD,EAASC,IAAI,GAAG,IAAhB,KAAyB;AAC3D,SAAO/B,eAAe,CAAC8B,MAAD,CAAf,GAA0BC,IAA1B,CAAP;AACD,CAFM","sourceRoot":"/source_map/","sourcesContent":["const COLUMN_REGEX = {\n  date: /date|fecha/i,\n  description: /description|descripción/i,\n  category: /category|categoría/i,\n  cost: /cost|coste/i,\n  currency: /currency|moneda/i,\n};\n\nconst PAYMENT_METHODS = {\n  tc: {\n    en: \"Credit Card\",\n  },\n  ef: {\n    en: \"Cash\",\n  },\n  id: {\n    en: \"ID\",\n  },\n  lp: {\n    en: \"LINE Pay\",\n  },\n  ic: {\n    en: \"Suica\",\n  },\n  db: {\n    en: \"Bank Deposit\",\n  },\n};\n\nconst DESCRIPTION_REGEX = new RegExp(\n  `(?:(?<paymentMethod>${Object.keys(PAYMENT_METHODS).join(\n    \"|\"\n  )})\\\\.\\\\s*)?(?<description>.*)`,\n  \"i\"\n);\n\nexport const getColumnIndexes = (headers) => {\n  const columns = {};\n  for (const [key, regex] of Object.entries(COLUMN_REGEX)) {\n    const index = headers.findIndex((h) => regex.test(h));\n    columns[key] = index;\n  }\n  return columns;\n};\n\nexport const parseDescription = (rawText) => {\n  const { paymentMethod, description } = DESCRIPTION_REGEX.exec(rawText).groups;\n  return { paymentMethod: paymentMethod?.toLowerCase(), description };\n};\n\nexport const getPaymentMethodName = (method, lang = \"en\") => {\n  return PAYMENT_METHODS[method]?.[lang];\n};\n"]}