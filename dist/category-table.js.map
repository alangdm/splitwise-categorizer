{"version":3,"sources":["src/category-table.js"],"names":["html","css","LitElement","empty","resetCSS","sharedCSS","getPaymentMethodName","CLIPBOARD_MESSAGES","success","error","CategoryTable","styles","properties","categories","type","Array","attribute","totals","Object","paymentMethodTotals","clipboardMessage","String","constructor","_categoryTemplate","bind","_copy","table","shadowRoot","querySelector","text","innerText","trim","window","navigator","clipboard","writeText","e","_totalsTemplate","header","cssClass","entries","map","currency","total","index","category","items","subtotals","date","description","cost","paymentMethod","_paymentMethodTotalsTemplate","render","length","customElements","define"],"mappings":"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","sourceRoot":"/source_map/","sourcesContent":["import { html, css, LitElement, empty } from \"lit\";\n\nimport { resetCSS } from \"./reset.css.js\";\nimport { sharedCSS } from \"./shared.css.js\";\n\nimport { getPaymentMethodName } from \"./utils.js\";\n\nconst CLIPBOARD_MESSAGES = {\n  success: \"Table copied to clipboard!\",\n  error: \"Couldn't copy to clipboard. Please do it manually.\",\n};\n\nclass CategoryTable extends LitElement {\n  static get styles() {\n    return [\n      resetCSS,\n      sharedCSS,\n      css`\n        :host {\n          display: grid;\n          grid-template-rows: auto 1fr;\n          gap: 1rem;\n        }\n        table {\n          width: 100%;\n          line-height: 2;\n          border-collapse: collapse;\n        }\n        td,\n        th {\n          padding: 0 0.5rem;\n        }\n        .table-header,\n        .table-footer {\n          background: var(--teal-9);\n          color: var(--gray-0);\n          font-weight: bold;\n        }\n        .payment-method-footer {\n          background: var(--teal-7);\n          color: var(--gray-0);\n          font-weight: bold;\n        }\n        tbody\n          tr:not(.category-footer, .category-header, .table-header, .table-footer, .payment-method-footer):hover {\n          background: var(--teal-2);\n        }\n        .category-header th {\n          text-align: left;\n        }\n        :where(.category-footer, .table-footer, .payment-method-footer) th,\n        .currency {\n          text-align: right;\n        }\n        .category-footer + .category-header {\n          border-top: 2px solid var(--teal-9);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      categories: { type: Array, attribute: false },\n      totals: { type: Object, attribute: false },\n      paymentMethodTotals: { type: Object, attribute: false },\n      clipboardMessage: { type: String },\n    };\n  }\n\n  constructor() {\n    super();\n    this.categories = {};\n    this.clipboardMessage = \"\";\n    this._categoryTemplate = this._categoryTemplate.bind(this);\n  }\n\n  async _copy() {\n    const table = this.shadowRoot.querySelector(\"table\");\n    const text = table.innerText.trim();\n    try {\n      await window.navigator.clipboard.writeText(text);\n      this.clipboardMessage = CLIPBOARD_MESSAGES.success;\n    } catch (e) {\n      this.clipboardMessage = CLIPBOARD_MESSAGES.error;\n    }\n  }\n\n  _totalsTemplate({ header, totals, cssClass = \"table-footer\" }) {\n    const entries = Object.entries(totals);\n    return html`\n      ${entries.map(\n        ([currency, total], index) => html`\n          <tr class=${cssClass}>\n            <td></td>\n            <td></td>\n            ${index === 0\n              ? html`<th scope=\"row\">\n                  ${header ? `${header} subtotal` : \"Total\"}\n                </th>`\n              : html`<td></td>`}\n            <td class=\"currency\">${currency}</td>\n            <td>${total}</td>\n          </tr>\n        `\n      )}\n    `;\n  }\n\n  _categoryTemplate([category, { items, subtotals }]) {\n    return html`\n      <tr class=\"category-header\">\n        <th scope=\"row\" colspan=\"5\">* ${category}</th>\n      </tr>\n      ${items.map(\n        ({ date, description, cost, currency, paymentMethod = \"\" }) => html`\n          <tr>\n            <td>${date}</td>\n            <td>${description}</td>\n            <td>${getPaymentMethodName(paymentMethod)}</td>\n            <td class=\"currency\">${currency}</td>\n            <td>${cost}</td>\n          </tr>\n        `\n      )}\n      ${this._totalsTemplate({\n        header: category,\n        totals: subtotals,\n        cssClass: \"category-footer\",\n      })}\n    `;\n  }\n\n  _paymentMethodTotalsTemplate() {\n    const entries = Object.entries(this.paymentMethodTotals);\n    return html`\n      ${entries.map(([paymentMethod, totals]) =>\n        this._totalsTemplate({\n          header: getPaymentMethodName(paymentMethod),\n          totals,\n          cssClass: \"payment-method-footer\",\n        })\n      )}\n    `;\n  }\n\n  render() {\n    const categories = Object.entries(this.categories);\n    if (categories.length === 0) {\n      return empty;\n    }\n    return html`\n      <div>\n        <button type=\"button\" @click=${this._copy}>Copy to clipboard</button>\n        <span>${this.clipboardMessage}</span>\n      </div>\n      <table>\n        <tbody>\n          <tr class=\"table-header\">\n            <th scope=\"col\">Date</th>\n            <th scope=\"col\">Description</th>\n            <th scope=\"col\">Payment Method</th>\n            <th scope=\"col\">Currency</th>\n            <th scope=\"col\">Cost</th>\n          </tr>\n          ${categories.map(this._categoryTemplate)}\n          ${this._paymentMethodTotalsTemplate()}\n          ${this._totalsTemplate({ totals: this.totals })}\n        </tbody>\n      </table>\n    `;\n  }\n}\n\nwindow.customElements.define(\"category-table\", CategoryTable);\n"]}