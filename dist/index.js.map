{"version":3,"sources":["src/index.js"],"names":["html","css","LitElement","resetCSS","sharedCSS","getColumnIndexes","parseDescription","SplitwiseCategorizer","styles","properties","categories","type","Array","state","isCategorizing","Boolean","reflect","totals","Object","constructor","columns","paymentMethodTotals","csv","shadowRoot","querySelector","render","_categorize","_parseContents","csvContents","cols","row","values","split","date","paymentMethod","description","category","cost","parseFloat","currency","items","subtotals","push","csvRows","filter","i","csvHeaders","slice","length","window","customElements","define"],"mappings":"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","sourceRoot":"/source_map/","sourcesContent":["import { html, css, LitElement } from \"lit\";\n\nimport { resetCSS } from \"./reset.css.js\";\nimport { sharedCSS } from \"./shared.css.js\";\n\nimport \"./category-table.js\";\nimport \"./csv-input.js\";\n\nimport { getColumnIndexes, parseDescription } from \"./utils.js\";\n\nclass SplitwiseCategorizer extends LitElement {\n  static get styles() {\n    return [\n      resetCSS,\n      sharedCSS,\n      css`\n        :host {\n          height: 100%;\n          padding: 0.5rem;\n          display: grid;\n          grid-template-rows: auto 1fr;\n          gap: 1rem;\n          color: var(--gray-9);\n        }\n        /* header */\n        header {\n          display: flex;\n          flex-flow: column wrap;\n          align-items: start;\n          gap: 0.5rem;\n          padding-bottom: 1rem;\n          border-bottom: 2px solid var(--gray-5);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      categories: { type: Array, state: true },\n      isCategorizing: { type: Boolean, reflect: true },\n      totals: { type: Object, state: true },\n    };\n  }\n\n  constructor() {\n    super();\n    this.isCategorizing = false;\n    this.categories = {};\n    this.columns = {};\n    this.totals = {};\n    this.paymentMethodTotals = {};\n  }\n\n  get csv() {\n    return this.shadowRoot.querySelector(\"csv-input\").csv;\n  }\n\n  render() {\n    return html`\n      <header>\n        <csv-input></csv-input>\n        <button type=\"button\" @click=${this._categorize}>Categorize</button>\n      </header>\n      <main>\n        ${this.isCategorizing\n          ? html`Categorizing...`\n          : html`<category-table\n              .categories=${this.categories}\n              .totals=${this.totals}\n              .paymentMethodTotals=${this.paymentMethodTotals}\n            ></category-table>`}\n      </main>\n    `;\n  }\n\n  _parseContents(csvContents) {\n    const cols = this.columns;\n    for (const row of csvContents) {\n      const values = row.split(\",\");\n      const date = values[cols.date];\n      const { paymentMethod, description } = parseDescription(\n        values[cols.description]\n      );\n      const category = values[cols.category];\n      const cost = parseFloat(values[cols.cost]);\n      const currency = values[cols.currency];\n\n      if (!this.categories[category]) {\n        this.categories[category] = {\n          items: [],\n          subtotals: {},\n        };\n      }\n\n      this.categories[category].items.push({\n        date,\n        description,\n        cost,\n        currency,\n        paymentMethod,\n      });\n\n      if (!this.categories[category].subtotals[currency]) {\n        this.categories[category].subtotals[currency] = cost;\n      } else {\n        this.categories[category].subtotals[currency] += cost;\n      }\n\n      if (!this.totals[currency]) {\n        this.totals[currency] = cost;\n      } else {\n        this.totals[currency] += cost;\n      }\n\n      // payment method\n      if (!paymentMethod) {\n        continue;\n      }\n\n      if (!this.paymentMethodTotals[paymentMethod]) {\n        this.paymentMethodTotals[paymentMethod] = {};\n      }\n      if (!this.paymentMethodTotals[paymentMethod][currency]) {\n        this.paymentMethodTotals[paymentMethod][currency] = cost;\n      } else {\n        this.paymentMethodTotals[paymentMethod][currency] += cost;\n      }\n    }\n  }\n\n  _categorize() {\n    if (!this.csv || this.isCategorizing) {\n      // TODO error handling\n      return;\n    }\n    this.isCategorizing = true;\n    this.categories = {};\n    this.totals = {};\n    this.paymentMethodTotals = {};\n\n    const csvRows = this.csv.split(\"\\n\").filter((i) => i);\n\n    const csvHeaders = csvRows[0];\n    this.columns = getColumnIndexes(csvHeaders.split(\",\"));\n\n    const csvContents = csvRows.slice(1, csvRows.length - 1);\n\n    this._parseContents(csvContents);\n\n    this.isCategorizing = false;\n  }\n}\n\nwindow.customElements.define(\"splitwise-categorizer\", SplitwiseCategorizer);\n"]}