{"version":3,"sources":["src/index.js"],"names":["html","css","LitElement","resetCSS","sharedCSS","getColumnIndexes","SplitwiseCategorizer","styles","properties","categories","type","Array","state","isCategorizing","Boolean","reflect","total","Number","constructor","columns","csv","shadowRoot","querySelector","value","render","_categorize","_parseContents","csvContents","cols","row","values","split","date","description","category","cost","parseFloat","currency","items","subtotal","push","csvRows","filter","i","csvHeaders","slice","length","window","customElements","define"],"mappings":"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","sourceRoot":"/source_map/","sourcesContent":["import { html, css, LitElement } from \"lit\";\n\nimport { resetCSS } from \"./reset.css.js\";\nimport { sharedCSS } from \"./shared.css.js\";\n\nimport \"./category-table.js\";\n\nimport { getColumnIndexes } from \"./utils.js\";\n\nclass SplitwiseCategorizer extends LitElement {\n  static get styles() {\n    return [\n      resetCSS,\n      sharedCSS,\n      css`\n        :host {\n          height: 100%;\n          padding: 0.5rem;\n          display: grid;\n          grid-template-rows: auto 1fr;\n          gap: 1rem;\n          color: var(--gray-9);\n        }\n        /* header */\n        header {\n          display: flex;\n          flex-flow: column wrap;\n          align-items: start;\n          gap: 0.5rem;\n          padding-bottom: 1rem;\n          border-bottom: 2px solid var(--gray-5);\n        }\n        label {\n          font-weight: bold;\n        }\n        textarea {\n          resize: block;\n        }\n        textarea:focus-visible {\n          outline: solid var(--primary-color);\n        }\n      `,\n    ];\n  }\n\n  static get properties() {\n    return {\n      categories: { type: Array, state: true },\n      isCategorizing: { type: Boolean, reflect: true },\n      total: { type: Number, state: true },\n    };\n  }\n\n  constructor() {\n    super();\n    this.isCategorizing = false;\n    this.categories = {};\n    this.columns = {};\n  }\n\n  get csv() {\n    return this.shadowRoot.querySelector(\"#csv\").value;\n  }\n\n  render() {\n    return html`\n      <header>\n        <label for=\"csv\">Splitwise CSV</label>\n        <textarea\n          id=\"csv\"\n          rows=\"5\"\n          cols=\"80\"\n          placeholder=\"Paste the full Splitwise CSV here\"\n        ></textarea>\n        <button type=\"button\" @click=${this._categorize}>Categorize</button>\n      </header>\n      <main>\n        ${this.isCategorizing\n          ? html`Categorizing...`\n          : html`<category-table\n              .categories=${this.categories}\n              .total=${this.total}\n            ></category-table>`}\n      </main>\n    `;\n  }\n\n  _parseContents(csvContents) {\n    // TODO multiple currencies?\n    const cols = this.columns;\n    for (const row of csvContents) {\n      const values = row.split(\",\");\n      const date = values[cols.date];\n      const description = values[cols.description];\n      const category = values[cols.category];\n      const cost = parseFloat(values[cols.cost]);\n      const currency = values[cols.currency];\n\n      if (!this.categories[category]) {\n        this.categories[category] = {\n          items: [],\n          subtotal: 0,\n        };\n      }\n\n      this.categories[category].items.push({\n        date,\n        description,\n        cost,\n        currency,\n      });\n\n      this.categories[category].subtotal += cost;\n      this.total += cost;\n    }\n  }\n\n  _categorize() {\n    if (!this.csv || this.isCategorizing) {\n      // TODO error handling\n      return;\n    }\n    this.isCategorizing = true;\n    this.categories = {};\n    this.total = 0;\n\n    const csvRows = this.csv.split(\"\\n\").filter((i) => i);\n\n    const csvHeaders = csvRows[0];\n    this.columns = getColumnIndexes(csvHeaders.split(\",\"));\n\n    const csvContents = csvRows.slice(1, csvRows.length - 1);\n\n    this._parseContents(csvContents);\n\n    this.isCategorizing = false;\n  }\n}\n\nwindow.customElements.define(\"splitwise-categorizer\", SplitwiseCategorizer);\n"]}